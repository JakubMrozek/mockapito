/*
 * Apiary Blueprint Parser 0.4.4
 *
 * https://github.com/apiaryio/blueprint-parser
 *
 * Copyright (c) 2012-2013 Apiary Ltd.
 * Licensed under the MIT license
 */
var ApiaryBlueprintParser = (function() {

function require(path) {
  return require[path];
}

require["./ast"] = (function() {
var module = { exports: {} };

// Generated by CoffeeScript 1.4.0
var Blueprint, JsonSchemaValidation, Request, Resource, Response, Section, combineParts, escapeBody, fillProps;

fillProps = function(object, props, defaults) {
  var key, _results;
  _results = [];
  for (key in defaults) {
    _results.push(object[key] = props[key] || defaults[key]);
  }
  return _results;
};

combineParts = function(separator, builder) {
  var parts;
  parts = [];
  builder(parts);
  return parts.join(separator);
};

escapeBody = function(body) {
  var i;
  if (/^>\s+|^<\s+|^\s*$/m.test(body)) {
    if (/^>>>\s*$/m.test(body)) {
      if (/^EOT$/m.test(body)) {
        i = 1;
        while (/^EOT#{i}$/m.test(body)) {
          i++;
        }
        return "<<<EOT" + i + "\n" + body + "\nEOT" + i;
      } else {
        return "<<<EOT\n" + body + "\nEOT";
      }
    } else {
      return "<<<\n" + body + "\n>>>";
    }
  } else {
    return body;
  }
};

Blueprint = (function() {

  Blueprint.fromJSON = function(json) {
    var s, v;
    return new this({
      location: json.location,
      name: json.name,
      description: json.description,
      sections: (function() {
        var _i, _len, _ref, _results;
        _ref = json.sections;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          s = _ref[_i];
          _results.push(Section.fromJSON(s));
        }
        return _results;
      })(),
      validations: (function() {
        var _i, _len, _ref, _results;
        _ref = json.validations;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          _results.push(JsonSchemaValidation.fromJSON(v));
        }
        return _results;
      })()
    });
  };

  function Blueprint(props) {
    if (props == null) {
      props = {};
    }
    fillProps(this, props, {
      location: null,
      name: null,
      description: null,
      sections: [],
      validations: []
    });
  }

  Blueprint.prototype.resources = function(opts) {
    var r, resources, s, _i, _j, _len, _len1, _ref, _ref1;
    resources = [];
    _ref = this.sections;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      _ref1 = s.resources;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        r = _ref1[_j];
        if ((opts != null ? opts.method : void 0) && opts.method !== r.method) {
          continue;
        }
        if ((opts != null ? opts.url : void 0) && opts.url !== r.url) {
          continue;
        }
        resources.push(r);
      }
    }
    return resources;
  };

  Blueprint.prototype.toJSON = function() {
    var s, v;
    return {
      location: this.location,
      name: this.name,
      description: this.description,
      sections: (function() {
        var _i, _len, _ref, _results;
        _ref = this.sections;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          s = _ref[_i];
          _results.push(s.toJSON());
        }
        return _results;
      }).call(this),
      validations: (function() {
        var _i, _len, _ref, _results;
        _ref = this.validations;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          v = _ref[_i];
          _results.push(v.toJSON());
        }
        return _results;
      }).call(this)
    };
  };

  Blueprint.prototype.toBlueprint = function() {
    var _this = this;
    return combineParts("\n\n", function(parts) {
      var s, v, _i, _j, _len, _len1, _ref, _ref1, _results;
      if (_this.location) {
        parts.push("HOST: " + _this.location);
      }
      if (_this.name) {
        parts.push("--- " + _this.name + " ---");
      }
      if (_this.description) {
        parts.push("---\n" + _this.description + "\n---");
      }
      _ref = _this.sections;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        parts.push(s.toBlueprint());
      }
      if (_this.validations.length > 0) {
        parts.push("-- JSON Schema Validations --");
      }
      _ref1 = _this.validations;
      _results = [];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        v = _ref1[_j];
        _results.push(parts.push(v.toBlueprint()));
      }
      return _results;
    });
  };

  return Blueprint;

})();

Section = (function() {

  Section.fromJSON = function(json) {
    var r;
    return new this({
      name: json.name,
      description: json.description,
      resources: (function() {
        var _i, _len, _ref, _results;
        _ref = json.resources;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          _results.push(Resource.fromJSON(r));
        }
        return _results;
      })()
    });
  };

  function Section(props) {
    if (props == null) {
      props = {};
    }
    fillProps(this, props, {
      name: null,
      description: null,
      resources: []
    });
  }

  Section.prototype.toJSON = function() {
    var r;
    return {
      name: this.name,
      description: this.description,
      resources: (function() {
        var _i, _len, _ref, _results;
        _ref = this.resources;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          _results.push(r.toJSON());
        }
        return _results;
      }).call(this)
    };
  };

  Section.prototype.toBlueprint = function() {
    var _this = this;
    return combineParts("\n\n", function(parts) {
      var r, _i, _len, _ref, _results;
      if (_this.name) {
        if (_this.description) {
          parts.push("--\n" + _this.name + "\n" + _this.description + "\n--");
        } else {
          parts.push("-- " + _this.name + " --");
        }
      }
      _ref = _this.resources;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        _results.push(parts.push(r.toBlueprint()));
      }
      return _results;
    });
  };

  return Section;

})();

Resource = (function() {

  Resource.fromJSON = function(json) {
    var r;
    return new this({
      description: json.description,
      method: json.method,
      url: json.url,
      request: Request.fromJSON(json.request),
      responses: (function() {
        var _i, _len, _ref, _results;
        _ref = json.responses;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          _results.push(Response.fromJSON(r));
        }
        return _results;
      })()
    });
  };

  function Resource(props) {
    if (props == null) {
      props = {};
    }
    fillProps(this, props, {
      description: null,
      method: "GET",
      url: "/",
      request: new Request,
      responses: [new Response]
    });
  }

  Resource.prototype.getUrlFragment = function() {
    return "" + (this.method.toLowerCase()) + "-" + (encodeURIComponent(this.url));
  };

  Resource.prototype.toJSON = function() {
    var r;
    return {
      description: this.description,
      method: this.method,
      url: this.url,
      request: this.request.toJSON(),
      responses: (function() {
        var _i, _len, _ref, _results;
        _ref = this.responses;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          _results.push(r.toJSON());
        }
        return _results;
      }).call(this)
    };
  };

  Resource.prototype.toBlueprint = function() {
    var _this = this;
    return combineParts("\n", function(parts) {
      var requestBlueprint, responsesBlueprint;
      if (_this.description) {
        parts.push(_this.description);
      }
      parts.push("" + _this.method + " " + _this.url);
      requestBlueprint = _this.request.toBlueprint();
      if (requestBlueprint !== "") {
        parts.push(requestBlueprint);
      }
      responsesBlueprint = combineParts("\n+++++\n", function(parts) {
        var r, _i, _len, _ref, _results;
        _ref = _this.responses;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          r = _ref[_i];
          _results.push(parts.push(r.toBlueprint()));
        }
        return _results;
      });
      return parts.push(responsesBlueprint);
    });
  };

  return Resource;

})();

Request = (function() {

  Request.fromJSON = function(json) {
    return new this({
      headers: json.headers,
      body: json.body
    });
  };

  function Request(props) {
    if (props == null) {
      props = {};
    }
    fillProps(this, props, {
      headers: {},
      body: null
    });
  }

  Request.prototype.toJSON = function() {
    return {
      headers: this.headers,
      body: this.body
    };
  };

  Request.prototype.toBlueprint = function() {
    var _this = this;
    return combineParts("\n", function(parts) {
      var name, value, _ref;
      _ref = _this.headers;
      for (name in _ref) {
        value = _ref[name];
        parts.push("> " + name + ": " + value);
      }
      if (_this.body) {
        return parts.push(escapeBody(_this.body));
      }
    });
  };

  return Request;

})();

Response = (function() {

  Response.fromJSON = function(json) {
    return new this({
      status: json.status,
      headers: json.headers,
      body: json.body
    });
  };

  function Response(props) {
    if (props == null) {
      props = {};
    }
    fillProps(this, props, {
      status: 200,
      headers: {},
      body: null
    });
  }

  Response.prototype.toJSON = function() {
    return {
      status: this.status,
      headers: this.headers,
      body: this.body
    };
  };

  Response.prototype.toBlueprint = function() {
    var _this = this;
    return combineParts("\n", function(parts) {
      var name, value, _ref;
      parts.push("< " + _this.status);
      _ref = _this.headers;
      for (name in _ref) {
        value = _ref[name];
        parts.push("< " + name + ": " + value);
      }
      if (_this.body) {
        return parts.push(escapeBody(_this.body));
      }
    });
  };

  return Response;

})();

JsonSchemaValidation = (function() {

  JsonSchemaValidation.fromJSON = function(json) {
    return new this({
      method: json.method,
      url: json.url,
      body: json.body
    });
  };

  function JsonSchemaValidation(props) {
    if (props == null) {
      props = {};
    }
    fillProps(this, props, {
      method: "GET",
      url: "/",
      body: null
    });
  }

  JsonSchemaValidation.prototype.toJSON = function() {
    return {
      method: this.method,
      url: this.url,
      body: this.body
    };
  };

  JsonSchemaValidation.prototype.toBlueprint = function() {
    var _this = this;
    return combineParts("\n", function(parts) {
      parts.push("" + _this.method + " " + _this.url);
      if (_this.body) {
        return parts.push(escapeBody(_this.body));
      }
    });
  };

  return JsonSchemaValidation;

})();

module.exports = {
  Blueprint: Blueprint,
  Section: Section,
  Resource: Resource,
  Request: Request,
  Response: Response,
  JsonSchemaValidation: JsonSchemaValidation
};

return module.exports;
})();

require["./apiary-blueprint-parser"] = (function() {
var module = { exports: {} };

module.exports = (function() {
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      function stringEscape(s) {
        function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

        return s
          .replace(/\\/g,   '\\\\')
          .replace(/"/g,    '\\"')
          .replace(/\x08/g, '\\b')
          .replace(/\t/g,   '\\t')
          .replace(/\n/g,   '\\n')
          .replace(/\f/g,   '\\f')
          .replace(/\r/g,   '\\r')
          .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
          .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
          .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
          .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
      }

      var expectedDesc, foundDesc;

      switch (expected.length) {
        case 0:
          expectedDesc = "end of input";
          break;

        case 1:
          expectedDesc = expected[0];
          break;

        default:
          expectedDesc = expected.slice(0, -1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }

      foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

      return "Expected " + expectedDesc + " but " + foundDesc + " found.";
    }

    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
    this.message  = buildMessage(expected, found);
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$startRuleFunctions = { API: peg$parseAPI },
        peg$startRuleFunction  = peg$parseAPI,

        peg$c0 = null,
        peg$c1 = [],
        peg$c2 = "",
        peg$c3 = function(location, name, description, resources, sections, validations) {
              /* Wrap free-standing resources into an anonymnous section. */
              if (resources.length > 0) {
                sections.unshift(new Section({
                  name:        null,
                  description: null,
                  resources:   resources
                }));
              }

              return new Blueprint({
                location:    nullIfEmpty(location),
                name:        nullIfEmpty(name),
                description: nullIfEmpty(description),
                sections:    sections,
                validations: validations !== "" ? validations : []
              });
            },
        peg$c4 = "HOST:",
        peg$c5 = "\"HOST:\"",
        peg$c6 = function(url) {
              var urlWithoutProtocol = url.replace(/^https?:\/\//, ""),
                  slashIndex         = urlWithoutProtocol.indexOf("/");

              if (slashIndex > 0) {
                urlPrefix = urlWithoutProtocol.slice(slashIndex + 1);
              }

              return url;
            },
        peg$c7 = "---",
        peg$c8 = "\"---\"",
        peg$c9 = function(name) {
              return name.replace(/\s+---$/, "");
            },
        peg$c10 = function(lines) {
            return lines.join("\n");
          },
        peg$c11 = function(text) { return text; },
        peg$c12 = function(section) { return section; },
        peg$c13 = function(head, tail) {
              return combineHeadTail(head, tail);
            },
        peg$c14 = function(header, resources) {
              return new Section({
                name:        nullIfEmpty(header.name),
                description: nullIfEmpty(header.description),
                resources:   resources
              });
            },
        peg$c15 = "--",
        peg$c16 = "\"--\"",
        peg$c17 = function(name) {
              return {
                name:        name.replace(/\s+--$/, ""),
                description: ""
              };
            },
        peg$c18 = function(lines) {
            return {
              name:        lines.length > 0 ? lines[0] : "",
              description: lines.slice(1).join("\n")
            };
          },
        peg$c19 = function(resource) { return resource; },
        peg$c20 = function(description, signature, request, responses) {
              /* For the "HEAD" method every response body must be empty */
              if (signature.method === "HEAD") {
                for (var i = 0; i < responses.length; i++) {
                  if (responses[i].body !== null)
                    return null; /* Error, body must be null */
                };
              }

              var url = urlPrefix !== ""
                ? "/" + urlPrefix.replace(/\/$/, "") + "/" + signature.url.replace(/^\//, "")
                : signature.url;

              return new Resource({
                description: nullIfEmpty(description),
                method:      signature.method,
                url:         url,
                request:     request,
                responses:   responses
              });
            },
        peg$c21 = "resource description",
        peg$c22 = function(lines) { return lines.join("\n"); },
        peg$c23 = "GET",
        peg$c24 = "\"GET\"",
        peg$c25 = "POST",
        peg$c26 = "\"POST\"",
        peg$c27 = "PUT",
        peg$c28 = "\"PUT\"",
        peg$c29 = "DELETE",
        peg$c30 = "\"DELETE\"",
        peg$c31 = "OPTIONS",
        peg$c32 = "\"OPTIONS\"",
        peg$c33 = "PATCH",
        peg$c34 = "\"PATCH\"",
        peg$c35 = "PROPPATCH",
        peg$c36 = "\"PROPPATCH\"",
        peg$c37 = "LOCK",
        peg$c38 = "\"LOCK\"",
        peg$c39 = "UNLOCK",
        peg$c40 = "\"UNLOCK\"",
        peg$c41 = "COPY",
        peg$c42 = "\"COPY\"",
        peg$c43 = "MOVE",
        peg$c44 = "\"MOVE\"",
        peg$c45 = "MKCOL",
        peg$c46 = "\"MKCOL\"",
        peg$c47 = "HEAD",
        peg$c48 = "\"HEAD\"",
        peg$c49 = function(headers, body) {
              return new Request({
                headers: headers,
                body:    nullIfEmpty(body)
              });
            },
        peg$c50 = function(headers) { return convertHeaders(headers); },
        peg$c51 = function(header) { return header; },
        peg$c52 = function(response) { return response; },
        peg$c53 = function(status, headers, body) {
              return new Response({
                status:  status,
                headers: headers,
                body:    nullIfEmpty(body)
              });
            },
        peg$c54 = function(status) { return status; },
        peg$c55 = "+++++",
        peg$c56 = "\"+++++\"",
        peg$c57 = "HTTP status code",
        peg$c58 = /^[0-9]/,
        peg$c59 = "[0-9]",
        peg$c60 = function(digits) { return parseInt(digits.join(""), 10); },
        peg$c61 = ":",
        peg$c62 = "\":\"",
        peg$c63 = function(name, value) {
              return {
                name:  name,
                value: value
              };
            },
        peg$c64 = "HTTP header name",
        peg$c65 = /^[!-9;-~]/,
        peg$c66 = "[!-9;-~]",
        peg$c67 = function(chars) { return chars.join(""); },
        peg$c68 = "HTTP header value",
        peg$c69 = "-- JSON Schema Validations --",
        peg$c70 = "\"-- JSON Schema Validations --\"",
        peg$c71 = function(validation) { return validation; },
        peg$c72 = function(signature, body) {
              return new JsonSchemaValidation({
                method: signature.method,
                url:    signature.url,
                body:   body
              });
            },
        peg$c73 = function(method, url) {
              return {
                method: method,
                url:    url
              };
            },
        peg$c74 = "<<<",
        peg$c75 = "\"<<<\"",
        peg$c76 = ">>>",
        peg$c77 = "\">>>\"",
        peg$c78 = function(lines) {
              return lines.join("\n");
            },
        peg$c79 = function(terminator) { bodyTerminator = terminator; return true; },
        peg$c80 = function(terminator, lines) {
              return lines.join("\n");
            },
        peg$c81 = function(terminator) { return terminator === bodyTerminator },
        peg$c82 = ">",
        peg$c83 = "\">\"",
        peg$c84 = "<",
        peg$c85 = "\"<\"",
        peg$c86 = "zero or more characters",
        peg$c87 = /^[^\n\r]/,
        peg$c88 = "[^\\n\\r]",
        peg$c89 = "one or more characters",
        peg$c90 = "empty line",
        peg$c91 = "end of line or file",
        peg$c92 = "end of line",
        peg$c93 = "\n",
        peg$c94 = "\"\\n\"",
        peg$c95 = "\r\n",
        peg$c96 = "\"\\r\\n\"",
        peg$c97 = "\r",
        peg$c98 = "\"\\r\"",
        peg$c99 = "end of file",
        peg$c100 = "any character",
        peg$c101 = function() { return ""; },
        peg$c102 = "whitespace",
        peg$c103 = /^[\t\x0B\f \xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\uFEFF]/,
        peg$c104 = "[\\t\\x0B\\f \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\uFEFF]",

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function peg$computePosDetails(pos) {
      function advance(details, pos) {
        var p, ch;

        for (p = 0; p < pos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        peg$cachedPos = pos;
        advance(peg$cachedPosDetails, peg$cachedPos);
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$cleanupExpected(expected) {
      var i;

      expected.sort();

      for (i = 1; i < expected.length; i++) {
        if (expected[i - 1] === expected[i]) {
          expected.splice(i, 1);
        }
      }
    }

    function peg$parseAPI() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseEmptyLine();
      while (s2 !== null) {
        s1.push(s2);
        s2 = peg$parseEmptyLine();
      }
      if (s1 !== null) {
        s2 = peg$parseLocation();
        if (s2 === null) {
          s2 = peg$c2;
        }
        if (s2 !== null) {
          s3 = [];
          s4 = peg$parseEmptyLine();
          while (s4 !== null) {
            s3.push(s4);
            s4 = peg$parseEmptyLine();
          }
          if (s3 !== null) {
            s4 = peg$parseAPIName();
            if (s4 !== null) {
              s5 = [];
              s6 = peg$parseEmptyLine();
              while (s6 !== null) {
                s5.push(s6);
                s6 = peg$parseEmptyLine();
              }
              if (s5 !== null) {
                s6 = peg$parseAPIDescription();
                if (s6 === null) {
                  s6 = peg$c2;
                }
                if (s6 !== null) {
                  s7 = [];
                  s8 = peg$parseEmptyLine();
                  while (s8 !== null) {
                    s7.push(s8);
                    s8 = peg$parseEmptyLine();
                  }
                  if (s7 !== null) {
                    s8 = peg$parseResources();
                    if (s8 !== null) {
                      s9 = [];
                      s10 = peg$parseEmptyLine();
                      while (s10 !== null) {
                        s9.push(s10);
                        s10 = peg$parseEmptyLine();
                      }
                      if (s9 !== null) {
                        s10 = peg$parseSections();
                        if (s10 !== null) {
                          s11 = [];
                          s12 = peg$parseEmptyLine();
                          while (s12 !== null) {
                            s11.push(s12);
                            s12 = peg$parseEmptyLine();
                          }
                          if (s11 !== null) {
                            s12 = peg$parseJsonSchemaValidations();
                            if (s12 === null) {
                              s12 = peg$c2;
                            }
                            if (s12 !== null) {
                              s13 = [];
                              s14 = peg$parseEmptyLine();
                              while (s14 !== null) {
                                s13.push(s14);
                                s14 = peg$parseEmptyLine();
                              }
                              if (s13 !== null) {
                                peg$reportedPos = s0;
                                s1 = peg$c3(s2,s4,s6,s8,s10,s12);
                                if (s1 === null) {
                                  peg$currPos = s0;
                                  s0 = s1;
                                } else {
                                  s0 = s1;
                                }
                              } else {
                                peg$currPos = s0;
                                s0 = peg$c0;
                              }
                            } else {
                              peg$currPos = s0;
                              s0 = peg$c0;
                            }
                          } else {
                            peg$currPos = s0;
                            s0 = peg$c0;
                          }
                        } else {
                          peg$currPos = s0;
                          s0 = peg$c0;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$c0;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseLocation() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c4) {
        s1 = peg$c4;
        peg$currPos += 5;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parseS();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parseS();
        }
        if (s2 !== null) {
          s3 = peg$parseText0();
          if (s3 !== null) {
            s4 = peg$parseEOLF();
            if (s4 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c6(s3);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseAPIName() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c7) {
        s1 = peg$c7;
        peg$currPos += 3;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parseS();
        if (s3 !== null) {
          while (s3 !== null) {
            s2.push(s3);
            s3 = peg$parseS();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== null) {
          s3 = peg$parseText1();
          if (s3 !== null) {
            s4 = peg$parseEOLF();
            if (s4 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c9(s3);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseAPIDescription() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c7) {
        s1 = peg$c7;
        peg$currPos += 3;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parseS();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parseS();
        }
        if (s2 !== null) {
          s3 = peg$parseEOL();
          if (s3 !== null) {
            s4 = [];
            s5 = peg$parseAPIDescriptionLine();
            while (s5 !== null) {
              s4.push(s5);
              s5 = peg$parseAPIDescriptionLine();
            }
            if (s4 !== null) {
              if (input.substr(peg$currPos, 3) === peg$c7) {
                s5 = peg$c7;
                peg$currPos += 3;
              } else {
                s5 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c8); }
              }
              if (s5 !== null) {
                s6 = [];
                s7 = peg$parseS();
                while (s7 !== null) {
                  s6.push(s7);
                  s7 = peg$parseS();
                }
                if (s6 !== null) {
                  s7 = peg$parseEOLF();
                  if (s7 !== null) {
                    peg$reportedPos = s0;
                    s1 = peg$c10(s4);
                    if (s1 === null) {
                      peg$currPos = s0;
                      s0 = s1;
                    } else {
                      s0 = s1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseAPIDescriptionLine() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c7) {
        s3 = peg$c7;
        peg$currPos += 3;
      } else {
        s3 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s3 !== null) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== null) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        if (s4 !== null) {
          s5 = peg$parseEOLF();
          if (s5 !== null) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      peg$silentFails--;
      if (s2 === null) {
        s1 = peg$c2;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== null) {
        s2 = peg$parseText0();
        if (s2 !== null) {
          s3 = peg$parseEOL();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c11(s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSections() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSection();
      if (s1 === null) {
        s1 = peg$c2;
      }
      if (s1 !== null) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parseEmptyLine();
        while (s5 !== null) {
          s4.push(s5);
          s5 = peg$parseEmptyLine();
        }
        if (s4 !== null) {
          s5 = peg$parseSection();
          if (s5 !== null) {
            peg$reportedPos = s3;
            s4 = peg$c12(s5);
            if (s4 === null) {
              peg$currPos = s3;
              s3 = s4;
            } else {
              s3 = s4;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parseEmptyLine();
          while (s5 !== null) {
            s4.push(s5);
            s5 = peg$parseEmptyLine();
          }
          if (s4 !== null) {
            s5 = peg$parseSection();
            if (s5 !== null) {
              peg$reportedPos = s3;
              s4 = peg$c12(s5);
              if (s4 === null) {
                peg$currPos = s3;
                s3 = s4;
              } else {
                s3 = s4;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c13(s1,s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSection() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseSectionHeader();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parseEmptyLine();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parseEmptyLine();
        }
        if (s2 !== null) {
          s3 = peg$parseResources();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c14(s1,s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSectionHeader() {
      var s0;

      s0 = peg$parseSectionHeaderLong();
      if (s0 === null) {
        s0 = peg$parseSectionHeaderShort();
      }

      return s0;
    }

    function peg$parseSectionHeaderShort() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseJsonSchemaValidationsHeader();
      peg$silentFails--;
      if (s2 === null) {
        s1 = peg$c2;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== null) {
        if (input.substr(peg$currPos, 2) === peg$c15) {
          s2 = peg$c15;
          peg$currPos += 2;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s2 !== null) {
          s3 = [];
          s4 = peg$parseS();
          if (s4 !== null) {
            while (s4 !== null) {
              s3.push(s4);
              s4 = peg$parseS();
            }
          } else {
            s3 = peg$c0;
          }
          if (s3 !== null) {
            s4 = peg$parseText1();
            if (s4 !== null) {
              s5 = peg$parseEOLF();
              if (s5 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c17(s4);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSectionHeaderLong() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseJsonSchemaValidationsHeader();
      peg$silentFails--;
      if (s2 === null) {
        s1 = peg$c2;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== null) {
        if (input.substr(peg$currPos, 2) === peg$c15) {
          s2 = peg$c15;
          peg$currPos += 2;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s2 !== null) {
          s3 = [];
          s4 = peg$parseS();
          while (s4 !== null) {
            s3.push(s4);
            s4 = peg$parseS();
          }
          if (s3 !== null) {
            s4 = peg$parseEOL();
            if (s4 !== null) {
              s5 = [];
              s6 = peg$parseSectionHeaderLongLine();
              while (s6 !== null) {
                s5.push(s6);
                s6 = peg$parseSectionHeaderLongLine();
              }
              if (s5 !== null) {
                if (input.substr(peg$currPos, 2) === peg$c15) {
                  s6 = peg$c15;
                  peg$currPos += 2;
                } else {
                  s6 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c16); }
                }
                if (s6 !== null) {
                  s7 = [];
                  s8 = peg$parseS();
                  while (s8 !== null) {
                    s7.push(s8);
                    s8 = peg$parseS();
                  }
                  if (s7 !== null) {
                    s8 = peg$parseEOLF();
                    if (s8 !== null) {
                      peg$reportedPos = s0;
                      s1 = peg$c18(s5);
                      if (s1 === null) {
                        peg$currPos = s0;
                        s0 = s1;
                      } else {
                        s0 = s1;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$c0;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSectionHeaderLongLine() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c15) {
        s3 = peg$c15;
        peg$currPos += 2;
      } else {
        s3 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c16); }
      }
      if (s3 !== null) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== null) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        if (s4 !== null) {
          s5 = peg$parseEOLF();
          if (s5 !== null) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      peg$silentFails--;
      if (s2 === null) {
        s1 = peg$c2;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== null) {
        s2 = peg$parseText0();
        if (s2 !== null) {
          s3 = peg$parseEOL();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c11(s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseResources() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseResource();
      if (s1 === null) {
        s1 = peg$c2;
      }
      if (s1 !== null) {
        s2 = [];
        s3 = peg$currPos;
        s4 = [];
        s5 = peg$parseEmptyLine();
        while (s5 !== null) {
          s4.push(s5);
          s5 = peg$parseEmptyLine();
        }
        if (s4 !== null) {
          s5 = peg$parseResource();
          if (s5 !== null) {
            peg$reportedPos = s3;
            s4 = peg$c19(s5);
            if (s4 === null) {
              peg$currPos = s3;
              s3 = s4;
            } else {
              s3 = s4;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = [];
          s5 = peg$parseEmptyLine();
          while (s5 !== null) {
            s4.push(s5);
            s5 = peg$parseEmptyLine();
          }
          if (s4 !== null) {
            s5 = peg$parseResource();
            if (s5 !== null) {
              peg$reportedPos = s3;
              s4 = peg$c19(s5);
              if (s4 === null) {
                peg$currPos = s3;
                s3 = s4;
              } else {
                s3 = s4;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c13(s1,s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseResource() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseSectionHeader();
      peg$silentFails--;
      if (s2 === null) {
        s1 = peg$c2;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== null) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseJsonSchemaValidationsHeader();
        peg$silentFails--;
        if (s3 === null) {
          s2 = peg$c2;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== null) {
          s3 = peg$parseResourceDescription();
          if (s3 === null) {
            s3 = peg$c2;
          }
          if (s3 !== null) {
            s4 = peg$parseSignature();
            if (s4 !== null) {
              s5 = peg$parseRequest();
              if (s5 !== null) {
                s6 = peg$parseResponses();
                if (s6 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c20(s3,s4,s5,s6);
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseResourceDescription() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseResourceDescriptionLine();
      if (s2 !== null) {
        while (s2 !== null) {
          s1.push(s2);
          s2 = peg$parseResourceDescriptionLine();
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c22(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }

      return s0;
    }

    function peg$parseResourceDescriptionLine() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseHttpMethod();
      peg$silentFails--;
      if (s2 === null) {
        s1 = peg$c2;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== null) {
        s2 = peg$parseText0();
        if (s2 !== null) {
          s3 = peg$parseEOL();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c11(s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseHttpMethod() {
      var s0;

      if (input.substr(peg$currPos, 3) === peg$c23) {
        s0 = peg$c23;
        peg$currPos += 3;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c24); }
      }
      if (s0 === null) {
        if (input.substr(peg$currPos, 4) === peg$c25) {
          s0 = peg$c25;
          peg$currPos += 4;
        } else {
          s0 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c26); }
        }
        if (s0 === null) {
          if (input.substr(peg$currPos, 3) === peg$c27) {
            s0 = peg$c27;
            peg$currPos += 3;
          } else {
            s0 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c28); }
          }
          if (s0 === null) {
            if (input.substr(peg$currPos, 6) === peg$c29) {
              s0 = peg$c29;
              peg$currPos += 6;
            } else {
              s0 = null;
              if (peg$silentFails === 0) { peg$fail(peg$c30); }
            }
            if (s0 === null) {
              if (input.substr(peg$currPos, 7) === peg$c31) {
                s0 = peg$c31;
                peg$currPos += 7;
              } else {
                s0 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c32); }
              }
              if (s0 === null) {
                if (input.substr(peg$currPos, 5) === peg$c33) {
                  s0 = peg$c33;
                  peg$currPos += 5;
                } else {
                  s0 = null;
                  if (peg$silentFails === 0) { peg$fail(peg$c34); }
                }
                if (s0 === null) {
                  if (input.substr(peg$currPos, 9) === peg$c35) {
                    s0 = peg$c35;
                    peg$currPos += 9;
                  } else {
                    s0 = null;
                    if (peg$silentFails === 0) { peg$fail(peg$c36); }
                  }
                  if (s0 === null) {
                    if (input.substr(peg$currPos, 4) === peg$c37) {
                      s0 = peg$c37;
                      peg$currPos += 4;
                    } else {
                      s0 = null;
                      if (peg$silentFails === 0) { peg$fail(peg$c38); }
                    }
                    if (s0 === null) {
                      if (input.substr(peg$currPos, 6) === peg$c39) {
                        s0 = peg$c39;
                        peg$currPos += 6;
                      } else {
                        s0 = null;
                        if (peg$silentFails === 0) { peg$fail(peg$c40); }
                      }
                      if (s0 === null) {
                        if (input.substr(peg$currPos, 4) === peg$c41) {
                          s0 = peg$c41;
                          peg$currPos += 4;
                        } else {
                          s0 = null;
                          if (peg$silentFails === 0) { peg$fail(peg$c42); }
                        }
                        if (s0 === null) {
                          if (input.substr(peg$currPos, 4) === peg$c43) {
                            s0 = peg$c43;
                            peg$currPos += 4;
                          } else {
                            s0 = null;
                            if (peg$silentFails === 0) { peg$fail(peg$c44); }
                          }
                          if (s0 === null) {
                            if (input.substr(peg$currPos, 5) === peg$c45) {
                              s0 = peg$c45;
                              peg$currPos += 5;
                            } else {
                              s0 = null;
                              if (peg$silentFails === 0) { peg$fail(peg$c46); }
                            }
                            if (s0 === null) {
                              if (input.substr(peg$currPos, 4) === peg$c47) {
                                s0 = peg$c47;
                                peg$currPos += 4;
                              } else {
                                s0 = null;
                                if (peg$silentFails === 0) { peg$fail(peg$c48); }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseRequest() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseRequestHeaders();
      if (s1 !== null) {
        s2 = peg$parseBody();
        if (s2 === null) {
          s2 = peg$c2;
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c49(s1,s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseRequestHeaders() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseRequestHeader();
      while (s2 !== null) {
        s1.push(s2);
        s2 = peg$parseRequestHeader();
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c50(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseRequestHeader() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseIn();
      if (s1 !== null) {
        s2 = peg$parseHttpHeader();
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c51(s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseResponses() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseResponse();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseResponseSeparator();
        if (s4 !== null) {
          s5 = peg$parseResponse();
          if (s5 !== null) {
            peg$reportedPos = s3;
            s4 = peg$c52(s5);
            if (s4 === null) {
              peg$currPos = s3;
              s3 = s4;
            } else {
              s3 = s4;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$c0;
        }
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseResponseSeparator();
          if (s4 !== null) {
            s5 = peg$parseResponse();
            if (s5 !== null) {
              peg$reportedPos = s3;
              s4 = peg$c52(s5);
              if (s4 === null) {
                peg$currPos = s3;
                s3 = s4;
              } else {
                s3 = s4;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$c0;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c13(s1,s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseResponse() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseResponseStatus();
      if (s1 !== null) {
        s2 = peg$parseResponseHeaders();
        if (s2 !== null) {
          s3 = peg$parseBody();
          if (s3 === null) {
            s3 = peg$c2;
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c53(s1,s2,s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseResponseStatus() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseOut();
      if (s1 !== null) {
        s2 = peg$parseHttpStatus();
        if (s2 !== null) {
          s3 = [];
          s4 = peg$parseS();
          while (s4 !== null) {
            s3.push(s4);
            s4 = peg$parseS();
          }
          if (s3 !== null) {
            s4 = peg$parseEOLF();
            if (s4 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c54(s2);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseResponseHeaders() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseResponseHeader();
      while (s2 !== null) {
        s1.push(s2);
        s2 = peg$parseResponseHeader();
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c50(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }

      return s0;
    }

    function peg$parseResponseHeader() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseOut();
      if (s1 !== null) {
        s2 = peg$parseHttpHeader();
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c51(s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseResponseSeparator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c55) {
        s1 = peg$c55;
        peg$currPos += 5;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c56); }
      }
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parseS();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parseS();
        }
        if (s2 !== null) {
          s3 = peg$parseEOL();
          if (s3 !== null) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseHttpStatus() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c58.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c59); }
      }
      if (s2 !== null) {
        while (s2 !== null) {
          s1.push(s2);
          if (peg$c58.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c59); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c60(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c57); }
      }

      return s0;
    }

    function peg$parseHttpHeader() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseHttpHeaderName();
      if (s1 !== null) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s2 = peg$c61;
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c62); }
        }
        if (s2 !== null) {
          s3 = [];
          s4 = peg$parseS();
          while (s4 !== null) {
            s3.push(s4);
            s4 = peg$parseS();
          }
          if (s3 !== null) {
            s4 = peg$parseHttpHeaderValue();
            if (s4 !== null) {
              s5 = peg$parseEOLF();
              if (s5 !== null) {
                peg$reportedPos = s0;
                s1 = peg$c63(s1,s4);
                if (s1 === null) {
                  peg$currPos = s0;
                  s0 = s1;
                } else {
                  s0 = s1;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseHttpHeaderName() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c65.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c66); }
      }
      if (s2 !== null) {
        while (s2 !== null) {
          s1.push(s2);
          if (peg$c65.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c66); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c67(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c64); }
      }

      return s0;
    }

    function peg$parseHttpHeaderValue() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseText0();
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }

      return s0;
    }

    function peg$parseJsonSchemaValidationsHeader() {
      var s0, s1, s2;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 29) === peg$c69) {
        s1 = peg$c69;
        peg$currPos += 29;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c70); }
      }
      if (s1 !== null) {
        s2 = peg$parseEOLF();
        if (s2 !== null) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseJsonSchemaValidations() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseJsonSchemaValidationsHeader();
      if (s1 !== null) {
        s2 = peg$parseJsonSchemaValidation();
        if (s2 === null) {
          s2 = peg$c2;
        }
        if (s2 !== null) {
          s3 = [];
          s4 = peg$currPos;
          s5 = [];
          s6 = peg$parseEmptyLine();
          while (s6 !== null) {
            s5.push(s6);
            s6 = peg$parseEmptyLine();
          }
          if (s5 !== null) {
            s6 = peg$parseJsonSchemaValidation();
            if (s6 !== null) {
              peg$reportedPos = s4;
              s5 = peg$c71(s6);
              if (s5 === null) {
                peg$currPos = s4;
                s4 = s5;
              } else {
                s4 = s5;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$c0;
          }
          while (s4 !== null) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = [];
            s6 = peg$parseEmptyLine();
            while (s6 !== null) {
              s5.push(s6);
              s6 = peg$parseEmptyLine();
            }
            if (s5 !== null) {
              s6 = peg$parseJsonSchemaValidation();
              if (s6 !== null) {
                peg$reportedPos = s4;
                s5 = peg$c71(s6);
                if (s5 === null) {
                  peg$currPos = s4;
                  s4 = s5;
                } else {
                  s4 = s5;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$c0;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
          }
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c13(s2,s3);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseJsonSchemaValidation() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseSignature();
      if (s1 !== null) {
        s2 = peg$parseBody();
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c72(s1,s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSignature() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseHttpMethod();
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parseS();
        if (s3 !== null) {
          while (s3 !== null) {
            s2.push(s3);
            s3 = peg$parseS();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== null) {
          s3 = peg$parseText1();
          if (s3 !== null) {
            s4 = peg$parseEOL();
            if (s4 !== null) {
              peg$reportedPos = s0;
              s1 = peg$c73(s1,s3);
              if (s1 === null) {
                peg$currPos = s0;
                s0 = s1;
              } else {
                s0 = s1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseBody() {
      var s0;

      s0 = peg$parseDelimitedBodyFixed();
      if (s0 === null) {
        s0 = peg$parseDelimitedBodyVariable();
        if (s0 === null) {
          s0 = peg$parseSimpleBody();
        }
      }

      return s0;
    }

    function peg$parseDelimitedBodyFixed() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c74) {
        s1 = peg$c74;
        peg$currPos += 3;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parseS();
        while (s3 !== null) {
          s2.push(s3);
          s3 = peg$parseS();
        }
        if (s2 !== null) {
          s3 = peg$parseEOL();
          if (s3 !== null) {
            s4 = [];
            s5 = peg$parseDelimitedBodyFixedLine();
            while (s5 !== null) {
              s4.push(s5);
              s5 = peg$parseDelimitedBodyFixedLine();
            }
            if (s4 !== null) {
              if (input.substr(peg$currPos, 3) === peg$c76) {
                s5 = peg$c76;
                peg$currPos += 3;
              } else {
                s5 = null;
                if (peg$silentFails === 0) { peg$fail(peg$c77); }
              }
              if (s5 !== null) {
                s6 = [];
                s7 = peg$parseS();
                while (s7 !== null) {
                  s6.push(s7);
                  s7 = peg$parseS();
                }
                if (s6 !== null) {
                  s7 = peg$parseEOLF();
                  if (s7 !== null) {
                    peg$reportedPos = s0;
                    s1 = peg$c78(s4);
                    if (s1 === null) {
                      peg$currPos = s0;
                      s0 = s1;
                    } else {
                      s0 = s1;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$c0;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDelimitedBodyFixedLine() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c76) {
        s3 = peg$c76;
        peg$currPos += 3;
      } else {
        s3 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c77); }
      }
      if (s3 !== null) {
        s4 = [];
        s5 = peg$parseS();
        while (s5 !== null) {
          s4.push(s5);
          s5 = peg$parseS();
        }
        if (s4 !== null) {
          s5 = peg$parseEOLF();
          if (s5 !== null) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$c0;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$c0;
      }
      peg$silentFails--;
      if (s2 === null) {
        s1 = peg$c2;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== null) {
        s2 = peg$parseText0();
        if (s2 !== null) {
          s3 = peg$parseEOL();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c11(s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDelimitedBodyVariable() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 3) === peg$c74) {
        s1 = peg$c74;
        peg$currPos += 3;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }
      if (s1 !== null) {
        s2 = peg$parseText1();
        if (s2 !== null) {
          s3 = peg$parseEOL();
          if (s3 !== null) {
            peg$reportedPos = peg$currPos;
            s4 = peg$c79(s2);
            if (s4) {
              s4 = peg$c2;
            } else {
              s4 = peg$c0;
            }
            if (s4 !== null) {
              s5 = [];
              s6 = peg$parseDelimitedBodyVariableLine();
              while (s6 !== null) {
                s5.push(s6);
                s6 = peg$parseDelimitedBodyVariableLine();
              }
              if (s5 !== null) {
                s6 = peg$parseDelimitedBodyVariableTerminator();
                if (s6 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c80(s2,s5);
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDelimitedBodyVariableLine() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseDelimitedBodyVariableTerminator();
      peg$silentFails--;
      if (s2 === null) {
        s1 = peg$c2;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== null) {
        s2 = peg$parseText0();
        if (s2 !== null) {
          s3 = peg$parseEOL();
          if (s3 !== null) {
            peg$reportedPos = s0;
            s1 = peg$c11(s2);
            if (s1 === null) {
              peg$currPos = s0;
              s0 = s1;
            } else {
              s0 = s1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseDelimitedBodyVariableTerminator() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseText1();
      if (s1 !== null) {
        s2 = peg$parseEOLF();
        if (s2 !== null) {
          peg$reportedPos = peg$currPos;
          s3 = peg$c81(s1);
          if (s3) {
            s3 = peg$c2;
          } else {
            s3 = peg$c0;
          }
          if (s3 !== null) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSimpleBody() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.substr(peg$currPos, 3) === peg$c74) {
        s2 = peg$c74;
        peg$currPos += 3;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c75); }
      }
      peg$silentFails--;
      if (s2 === null) {
        s1 = peg$c2;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parseSimpleBodyLine();
        if (s3 !== null) {
          while (s3 !== null) {
            s2.push(s3);
            s3 = peg$parseSimpleBodyLine();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== null) {
          peg$reportedPos = s0;
          s1 = peg$c22(s2);
          if (s1 === null) {
            peg$currPos = s0;
            s0 = s1;
          } else {
            s0 = s1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseSimpleBodyLine() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseIn();
      peg$silentFails--;
      if (s2 === null) {
        s1 = peg$c2;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== null) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseOut();
        peg$silentFails--;
        if (s3 === null) {
          s2 = peg$c2;
        } else {
          peg$currPos = s2;
          s2 = peg$c0;
        }
        if (s2 !== null) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$parseResponseSeparator();
          peg$silentFails--;
          if (s4 === null) {
            s3 = peg$c2;
          } else {
            peg$currPos = s3;
            s3 = peg$c0;
          }
          if (s3 !== null) {
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$parseEmptyLine();
            peg$silentFails--;
            if (s5 === null) {
              s4 = peg$c2;
            } else {
              peg$currPos = s4;
              s4 = peg$c0;
            }
            if (s4 !== null) {
              s5 = peg$parseText1();
              if (s5 !== null) {
                s6 = peg$parseEOLF();
                if (s6 !== null) {
                  peg$reportedPos = s0;
                  s1 = peg$c11(s5);
                  if (s1 === null) {
                    peg$currPos = s0;
                    s0 = s1;
                  } else {
                    s0 = s1;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$c0;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$c0;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c0;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c0;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseIn() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 62) {
        s1 = peg$c82;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c83); }
      }
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parseS();
        if (s3 !== null) {
          while (s3 !== null) {
            s2.push(s3);
            s3 = peg$parseS();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== null) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseOut() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 60) {
        s1 = peg$c84;
        peg$currPos++;
      } else {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c85); }
      }
      if (s1 !== null) {
        s2 = [];
        s3 = peg$parseS();
        if (s3 !== null) {
          while (s3 !== null) {
            s2.push(s3);
            s3 = peg$parseS();
          }
        } else {
          s2 = peg$c0;
        }
        if (s2 !== null) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }

      return s0;
    }

    function peg$parseText0() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c87.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c88); }
      }
      while (s2 !== null) {
        s1.push(s2);
        if (peg$c87.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c88); }
        }
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c67(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c86); }
      }

      return s0;
    }

    function peg$parseText1() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      if (peg$c87.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c88); }
      }
      if (s2 !== null) {
        while (s2 !== null) {
          s1.push(s2);
          if (peg$c87.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c88); }
          }
        }
      } else {
        s1 = peg$c0;
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c67(s1);
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c89); }
      }

      return s0;
    }

    function peg$parseEmptyLine() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = [];
      s2 = peg$parseS();
      while (s2 !== null) {
        s1.push(s2);
        s2 = peg$parseS();
      }
      if (s1 !== null) {
        s2 = peg$parseEOL();
        if (s2 !== null) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c0;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c0;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c90); }
      }

      return s0;
    }

    function peg$parseEOLF() {
      var s0, s1;

      peg$silentFails++;
      s0 = peg$parseEOL();
      if (s0 === null) {
        s0 = peg$parseEOF();
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c91); }
      }

      return s0;
    }

    function peg$parseEOL() {
      var s0, s1;

      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 10) {
        s0 = peg$c93;
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c94); }
      }
      if (s0 === null) {
        if (input.substr(peg$currPos, 2) === peg$c95) {
          s0 = peg$c95;
          peg$currPos += 2;
        } else {
          s0 = null;
          if (peg$silentFails === 0) { peg$fail(peg$c96); }
        }
        if (s0 === null) {
          if (input.charCodeAt(peg$currPos) === 13) {
            s0 = peg$c97;
            peg$currPos++;
          } else {
            s0 = null;
            if (peg$silentFails === 0) { peg$fail(peg$c98); }
          }
        }
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c92); }
      }

      return s0;
    }

    function peg$parseEOF() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c100); }
      }
      peg$silentFails--;
      if (s2 === null) {
        s1 = peg$c2;
      } else {
        peg$currPos = s1;
        s1 = peg$c0;
      }
      if (s1 !== null) {
        peg$reportedPos = s0;
        s1 = peg$c101();
      }
      if (s1 === null) {
        peg$currPos = s0;
        s0 = s1;
      } else {
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c99); }
      }

      return s0;
    }

    function peg$parseS() {
      var s0, s1;

      peg$silentFails++;
      if (peg$c103.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c104); }
      }
      peg$silentFails--;
      if (s0 === null) {
        s1 = null;
        if (peg$silentFails === 0) { peg$fail(peg$c102); }
      }

      return s0;
    }


      /*
       * Converts headers from format like this:
       *
       *   [
       *     { name: "Content-Type",   value: "application/json" },
       *     { name: "Content-Length", value: "153"              }
       *   ]
       *
       * into format like this:
       *
       *   {
       *     "Content-Type":   "application/json",
       *     "Content-Length": "153"
       *   }
       */
      function convertHeaders(headers) {
        var result = {}, i;

        for (i = 0; i < headers.length; i++) {
          result[headers[i].name] = headers[i].value;
        }

        return result;
      }

      function nullIfEmpty(s) {
        return s !== "" ? s : null;
      }

      function combineHeadTail(head, tail) {
        if (head !== "") {
          tail.unshift(head);
        }

        return tail;
      }

      /*
       * We must save these because |this| doesn't refer to the parser in actions.
       */
      var Blueprint            = this.ast.Blueprint,
          Section              = this.ast.Section,
          Resource             = this.ast.Resource,
          Request              = this.ast.Request,
          Response             = this.ast.Response,
          JsonSchemaValidation = this.ast.JsonSchemaValidation;

      var urlPrefix = "", bodyTerminator;


    peg$result = peg$startRuleFunction();

    if (peg$result !== null && peg$currPos === input.length) {
      return peg$result;
    } else {
      peg$cleanupExpected(peg$maxFailExpected);
      peg$reportedPos = Math.max(peg$currPos, peg$maxFailPos);

      throw new SyntaxError(
        peg$maxFailExpected,
        peg$reportedPos < input.length ? input.charAt(peg$reportedPos) : null,
        peg$reportedPos,
        peg$computePosDetails(peg$reportedPos).line,
        peg$computePosDetails(peg$reportedPos).column
      );
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse      : parse
  };
})();

module.exports.ast = require("./ast");

return module.exports;
})();

return require["./apiary-blueprint-parser"]
})();
